/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Kairos API
 * API do sistema Kairos para gestão de membros, grupos e eventos
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
	MutationFunction,
	UseMutationOptions,
	UseMutationResult,
} from "@tanstack/react-query";
import type {
	PostAuthLogin200,
	PostAuthLoginBody,
	PostAuthRegister201,
	PostAuthRegisterBody,
} from ".././model";
import { customInstance } from "../../axios-instance";

/**
 * Realiza login no sistema
 */
export const postAuthLogin = (
	postAuthLoginBody: PostAuthLoginBody,
	signal?: AbortSignal,
) => {
	return customInstance<PostAuthLogin200>({
		url: `/auth/login`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: postAuthLoginBody,
		signal,
	});
};

export const getPostAuthLoginMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postAuthLogin>>,
		TError,
		{ data: PostAuthLoginBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postAuthLogin>>,
	TError,
	{ data: PostAuthLoginBody },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postAuthLogin>>,
		{ data: PostAuthLoginBody }
	> = (props) => {
		const { data } = props ?? {};

		return postAuthLogin(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostAuthLoginMutationResult = NonNullable<
	Awaited<ReturnType<typeof postAuthLogin>>
>;
export type PostAuthLoginMutationBody = PostAuthLoginBody;
export type PostAuthLoginMutationError = unknown;

export const usePostAuthLogin = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postAuthLogin>>,
		TError,
		{ data: PostAuthLoginBody },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof postAuthLogin>>,
	TError,
	{ data: PostAuthLoginBody },
	TContext
> => {
	const mutationOptions = getPostAuthLoginMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Realiza logout do sistema
 */
export const postAuthLogout = (signal?: AbortSignal) => {
	return customInstance<void>({ url: `/auth/logout`, method: "POST", signal });
};

export const getPostAuthLogoutMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postAuthLogout>>,
		TError,
		void,
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postAuthLogout>>,
	TError,
	void,
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postAuthLogout>>,
		void
	> = () => {
		return postAuthLogout();
	};

	return { mutationFn, ...mutationOptions };
};

export type PostAuthLogoutMutationResult = NonNullable<
	Awaited<ReturnType<typeof postAuthLogout>>
>;

export type PostAuthLogoutMutationError = unknown;

export const usePostAuthLogout = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postAuthLogout>>,
		TError,
		void,
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof postAuthLogout>>,
	TError,
	void,
	TContext
> => {
	const mutationOptions = getPostAuthLogoutMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Registra um novo usuário
 */
export const postAuthRegister = (
	postAuthRegisterBody: PostAuthRegisterBody,
	signal?: AbortSignal,
) => {
	return customInstance<PostAuthRegister201>({
		url: `/auth/register`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: postAuthRegisterBody,
		signal,
	});
};

export const getPostAuthRegisterMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postAuthRegister>>,
		TError,
		{ data: PostAuthRegisterBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postAuthRegister>>,
	TError,
	{ data: PostAuthRegisterBody },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postAuthRegister>>,
		{ data: PostAuthRegisterBody }
	> = (props) => {
		const { data } = props ?? {};

		return postAuthRegister(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostAuthRegisterMutationResult = NonNullable<
	Awaited<ReturnType<typeof postAuthRegister>>
>;
export type PostAuthRegisterMutationBody = PostAuthRegisterBody;
export type PostAuthRegisterMutationError = unknown;

export const usePostAuthRegister = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postAuthRegister>>,
		TError,
		{ data: PostAuthRegisterBody },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof postAuthRegister>>,
	TError,
	{ data: PostAuthRegisterBody },
	TContext
> => {
	const mutationOptions = getPostAuthRegisterMutationOptions(options);

	return useMutation(mutationOptions);
};
