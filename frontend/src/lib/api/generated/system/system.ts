/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Kairos API
 * API do sistema Kairos para gestão de membros, grupos e eventos
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	MutationFunction,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type { GetSystemHealth200, PostSystemSetupBody } from ".././model";
import { customInstance } from "../../axios-instance";

/**
 * Configura o sistema pela primeira vez
 */
export const postSystemSetup = (
	postSystemSetupBody: PostSystemSetupBody,
	signal?: AbortSignal,
) => {
	return customInstance<void>({
		url: `/system/setup`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: postSystemSetupBody,
		signal,
	});
};

export const getPostSystemSetupMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postSystemSetup>>,
		TError,
		{ data: PostSystemSetupBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postSystemSetup>>,
	TError,
	{ data: PostSystemSetupBody },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postSystemSetup>>,
		{ data: PostSystemSetupBody }
	> = (props) => {
		const { data } = props ?? {};

		return postSystemSetup(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostSystemSetupMutationResult = NonNullable<
	Awaited<ReturnType<typeof postSystemSetup>>
>;
export type PostSystemSetupMutationBody = PostSystemSetupBody;
export type PostSystemSetupMutationError = unknown;

export const usePostSystemSetup = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postSystemSetup>>,
		TError,
		{ data: PostSystemSetupBody },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof postSystemSetup>>,
	TError,
	{ data: PostSystemSetupBody },
	TContext
> => {
	const mutationOptions = getPostSystemSetupMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Verifica o status do servidor
 */
export const getSystemHealth = (signal?: AbortSignal) => {
	return customInstance<GetSystemHealth200>({
		url: `/system/health`,
		method: "GET",
		signal,
	});
};

export const getGetSystemHealthQueryKey = () => {
	return [`/system/health`] as const;
};

export const getGetSystemHealthInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getSystemHealth>>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof getSystemHealth>>,
			TError,
			TData
		>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetSystemHealthQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getSystemHealth>>> = ({
		signal,
	}) => getSystemHealth(signal);

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getSystemHealth>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type GetSystemHealthInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getSystemHealth>>
>;
export type GetSystemHealthInfiniteQueryError = unknown;

export function useGetSystemHealthInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getSystemHealth>>>,
	TError = unknown,
>(options: {
	query: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof getSystemHealth>>,
			TError,
			TData
		>
	> &
		Pick<
			DefinedInitialDataOptions<
				Awaited<ReturnType<typeof getSystemHealth>>,
				TError,
				TData
			>,
			"initialData"
		>;
}): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useGetSystemHealthInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getSystemHealth>>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof getSystemHealth>>,
			TError,
			TData
		>
	> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof getSystemHealth>>,
				TError,
				TData
			>,
			"initialData"
		>;
}): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useGetSystemHealthInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getSystemHealth>>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof getSystemHealth>>,
			TError,
			TData
		>
	>;
}): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};

export function useGetSystemHealthInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getSystemHealth>>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof getSystemHealth>>,
			TError,
			TData
		>
	>;
}): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
} {
	const queryOptions = getGetSystemHealthInfiniteQueryOptions(options);

	const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetSystemHealthQueryOptions = <
	TData = Awaited<ReturnType<typeof getSystemHealth>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getSystemHealth>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetSystemHealthQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getSystemHealth>>> = ({
		signal,
	}) => getSystemHealth(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getSystemHealth>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type GetSystemHealthQueryResult = NonNullable<
	Awaited<ReturnType<typeof getSystemHealth>>
>;
export type GetSystemHealthQueryError = unknown;

export function useGetSystemHealth<
	TData = Awaited<ReturnType<typeof getSystemHealth>>,
	TError = unknown,
>(options: {
	query: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getSystemHealth>>, TError, TData>
	> &
		Pick<
			DefinedInitialDataOptions<
				Awaited<ReturnType<typeof getSystemHealth>>,
				TError,
				TData
			>,
			"initialData"
		>;
}): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useGetSystemHealth<
	TData = Awaited<ReturnType<typeof getSystemHealth>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getSystemHealth>>, TError, TData>
	> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof getSystemHealth>>,
				TError,
				TData
			>,
			"initialData"
		>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetSystemHealth<
	TData = Awaited<ReturnType<typeof getSystemHealth>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getSystemHealth>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetSystemHealth<
	TData = Awaited<ReturnType<typeof getSystemHealth>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getSystemHealth>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getGetSystemHealthQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
